<?php

namespace BackendBundle\Repository;

/**
 * ProductsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductsRepository extends \Doctrine\ORM\EntityRepository {

    public function findIndexProperties($limit, $lang, $loc = null) {
        $qb = $this->createQueryBuilder("e");
//        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('e.title as name,d.title,d.description,c.name as city, lo as location')
//            ->from('\BackendBundle\Entity\Products','e')
                ->join('\BackendBundle\Entity\ProductDescription', 'd', 'WITH', 'e = d.product')
                ->join('\BackendBundle\Entity\Languages', 'l', 'WITH', 'l = d.language')
                ->join('\BackendBundle\Entity\Location', 'lo', 'WITH', 'lo = e.location')
                ->join('\BackendBundle\Entity\City', 'c', 'WITH', 'c = lo.city')
                ->where('l.iso = :lang')
                ->andWhere('e.published = :pub')
                ->setParameter('lang', $lang)
                ->setParameter('pub', '1')
                ->setMaxResults($limit)
                ->setFirstResult(0)
        ;
        if ($loc != null) {
            $qb
                    ->andWhere('e.location = :loc')
                    ->setParameter('loc', $loc)
            ;
        }
        $result = $qb->getQuery()->getResult();

        return $result;
    }

    public function findOneProperty($lang) {
        $qb = $this->createQueryBuilder("e");
        $qb
                ->select('e.title as name,d.title,d.description,c.name as city, lo as location, e.capacity, e.gallery')
                ->join('\BackendBundle\Entity\ProductDescription', 'd', 'WITH', 'e = d.product')
                ->join('\BackendBundle\Entity\Languages', 'l', 'WITH', 'l = d.language')
                ->join('\BackendBundle\Entity\Location', 'lo', 'WITH', 'lo = e.location')
                ->join('\BackendBundle\Entity\City', 'c', 'WITH', 'c = lo.city')
                ->where('l.iso = :lang')
                ->andWhere('e.published = :pub')
                ->setParameter('lang', $lang)
                ->setParameter('pub', '1')
                ->setMaxResults(1)
        ;
        $result = $qb->getQuery()->getOneOrNullResult();

        return $result;
    }

    public function findIndexRoom($locale, $limit = null, $city = null) {

        $q = $this->createQueryBuilder("e");
        $q
                ->select('c.name as city', 'd.title as title', 'd.description as description', 'e.title as name', 'e.roomPrice')
                ->join('\BackendBundle\Entity\ProductDescription', 'd', 'WITH', 'e = d.product')
                ->join('\BackendBundle\Entity\Languages', 'ln', 'WITH', 'd.language = ln')
                ->join('\BackendBundle\Entity\Location', 'lo', 'WITH', 'e.location = lo')
                ->join('\BackendBundle\Entity\City', 'c', 'WITH', 'lo.city = c')
                ->where('e.published = :pub')
                ->andWhere('ln.iso = :lang')
                ->setParameter('lang', $locale)
                ->setParameter('pub', '1')
        ;

        if ($limit != null) {
            $q
                    ->setMaxResults($limit)
            ;
        }
        if ($city != null) {
            $q
                    ->andWhere("c = :city")
                    ->setParameter('city', $city)
            ;
        }

        $result = $q->getQuery()->getResult();
        return $result;
    }
    public function findOneRoom($name, $locale) {

        $q = $this->createQueryBuilder("e");
        $q
                ->select('c.name as city', 'd.title as title', 'd.description as description', 'e.title as name', 'e.roomPrice')
                ->join('\BackendBundle\Entity\ProductDescription', 'd', 'WITH', 'e = d.product')
                ->join('\BackendBundle\Entity\Languages', 'ln', 'WITH', 'd.language = ln')
                ->join('\BackendBundle\Entity\Location', 'lo', 'WITH', 'e.location = lo')
                ->join('\BackendBundle\Entity\City', 'c', 'WITH', 'lo.city = c')
                ->join('\BackendBundle\Entity\ProductPrices', 'pp', 'WITH', 'e = pp.product')
                ->where('e.title = :name')
                ->andWhere('ln.iso = :lang')
                ->setParameter('lang', $locale)
                ->setParameter('name', $name)
                ->setMaxResults('1' )
        ;

        $result = $q->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function findOthersRoomsByCityContext($locale, $limit = null, $city = null, $name = null) {

        $q = $this->createQueryBuilder("e");
        $q
                ->select('c.name as city', 'd.title as title', 'd.description as description', 'e.title as name', 'e.roomPrice')
                ->join('\BackendBundle\Entity\ProductDescription', 'd', 'WITH', 'e = d.product')
                ->join('\BackendBundle\Entity\Languages', 'ln', 'WITH', 'd.language = ln')
                ->join('\BackendBundle\Entity\Location', 'lo', 'WITH', 'e.location = lo')
                ->join('\BackendBundle\Entity\City', 'c', 'WITH', 'lo.city = c')
                ->where('e.published = :pub')
                ->andWhere('ln.iso = :lang')
                ->setParameter('lang', $locale)
                ->setParameter('pub', '1')
        ;

        if ($limit != null) {
            $q
                    ->setMaxResults($limit)
            ;
        }
        if ($city != null) {
            $q
                    ->andWhere("c = :city")
                    ->setParameter('city', $city)
            ;
        }
        if ($name != null) {
            $q
                    ->andWhere('e.title NOT LIKE :nam')
                    ->setParameter('nam', $name)
            ;
        }

        $result = $q->getQuery()->getResult();
        return $result;
    }

}
